{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAG5C;;;GAGG;AACH,MAAM,OAAO,mBAAoB,SAAQ,SAAS;IAChD;;;OAGG;IACH,SAAS;QACP,OAAO,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC;QACzE,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED;;;;OAIG;IACH,aAAa,CAAC,OAA0B;QACtC,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACH,oBAAoB,CAAC,OAEpB;QACC,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IACjD,CAAC;IAED;;;OAGG;IACH,eAAe;QACb,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACH,mBAAmB;QACjB,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,OAA4B;QAC1C,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;IACnD,CAAC;IAED;;;;OAIG;IACH,cAAc,CAAC,OAA4B;QACzC,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;IACnD,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,OAA4B;QAC1C,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;IACnD,CAAC;IAED;;;OAGG;IACH,eAAe;QACb,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1C,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type { TaleemabadPlugin } from './definitions';\n\n/**\n * Web implementation of TaleemabadPlugin.\n * Provides stub implementations for native functionality in web environment.\n */\nexport class TaleemabadWebPlugin extends WebPlugin implements TaleemabadPlugin {\n  /**\n   * Stub implementation for document scanning in web platform\n   * @returns Promise with empty scan result\n   */\n  startScan(): Promise<{ images?: string[]; pdf?: string | null }> {\n    console.error('Document scanning is not supported on the web platform.');\n    return Promise.resolve({ images: undefined, pdf: null });\n  }\n\n  /**\n   * Stub implementation for starting downloads\n   * @param options Object containing array of URLs to download\n   * @returns Promise with the same URLs without actual downloading\n   */\n  startDownload(options: { url: string[] }): Promise<{ value: string[] }> {\n    return Promise.resolve({ value: options.url });\n  }\n\n  /**\n   * Stub implementation for starting tagged downloads\n   * @param options Object containing array of tagged URLs\n   * @returns Promise with the same tagged URLs without actual downloading\n   */\n  startDownloadWithTag(options: {\n    url: { tag: string; url: string }[];\n  }): Promise<{ value: { tag: string; url: string }[] }> {\n    return Promise.resolve({ value: options.url });\n  }\n\n  /**\n   * Stub implementation for getting download list\n   * @returns Promise with empty download list\n   */\n  getDownloadList(): Promise<{ value: string }> {\n    return Promise.resolve({ value: '[]' });\n  }\n\n  /**\n   * Stub implementation for getting download list by ID\n   * @returns Promise with empty download list\n   */\n  getDownloadListById(): Promise<{ value: string }> {\n    return Promise.resolve({ value: '[]' });\n  }\n\n  /**\n   * Stub implementation for removing downloads\n   * @param options Object containing array of download IDs to remove\n   * @returns Promise with the same download IDs\n   */\n  removeDownloads(options: { value: string[] }): Promise<{ value: string[] }> {\n    return Promise.resolve({ value: options.value });\n  }\n\n  /**\n   * Stub implementation for pausing downloads\n   * @param options Object containing array of download IDs to pause\n   * @returns Promise with the same download IDs\n   */\n  pauseDownloads(options: { value: string[] }): Promise<{ value: string[] }> {\n    return Promise.resolve({ value: options.value });\n  }\n\n  /**\n   * Stub implementation for canceling downloads\n   * @param options Object containing array of download IDs to cancel\n   * @returns Promise with the same download IDs\n   */\n  cancelDownloads(options: { value: string[] }): Promise<{ value: string[] }> {\n    return Promise.resolve({ value: options.value });\n  }\n\n  /**\n   * Stub implementation for resuming downloads\n   * @returns Promise with empty result\n   */\n  resumeDownloads(): Promise<{ value: string }> {\n    return Promise.resolve({ value: '[]' });\n  }\n}\n"]}