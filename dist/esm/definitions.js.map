{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\nimport type { OutputFormats, ScanResult, URLRequest } from './types';\n\n/**\n * Main plugin interface that combines scanner and download functionality\n */\ninterface TaleemabadPlugin extends ScannerPlugin, DownloadPlugin {\n  /**\n   * Add a listener for download events\n   * @param eventName Name of the event to listen for\n   * @param listenerFunc Callback function that handles the event\n   */\n  addListener(\n    eventName: string,\n    listenerFunc: (download: { result: string }) => void,\n  ): PluginListenerHandle;\n}\n\n/**\n * Interface for document scanning functionality\n */\ninterface ScannerPlugin {\n  /**\n   * Start document scanning\n   * @param options Scanning configuration options\n   * @returns Promise with scanning results containing image paths and PDF path\n   */\n  startScan(\n    options?: Partial<{\n      pageLimit: number;\n      mode: string;\n      enableGalleryImport: boolean;\n      outputFormats: OutputFormats;\n    }>,\n  ): Promise<ScanResult>;\n}\n\n/**\n * Interface for download management functionality\n */\ninterface DownloadPlugin {\n  /**\n   * Start downloading files\n   * @param options Object containing array of URLs to download\n   * @returns Promise with array of download results\n   */\n  startDownload(options: { url: string[] }): Promise<{ value: string[] }>;\n\n  /**\n   * Start downloading files with tags\n   * @param options Object containing array of tagged URLs\n   * @returns Promise with array of tagged download results\n   */\n  startDownloadWithTag(options: {\n    url: URLRequest[];\n  }): Promise<{ value: URLRequest[] }>;\n\n  /**\n   * Remove downloads from the queue\n   * @param options Object containing array of download IDs to remove\n   * @returns Promise with array of removed download IDs\n   */\n  removeDownloads(options: { value: string[] }): Promise<{ value: string[] }>;\n\n  /**\n   * Pause active downloads\n   * @param options Object containing array of download IDs to pause\n   * @returns Promise with array of paused download IDs\n   */\n  pauseDownloads(options: { value: string[] }): Promise<{ value: string[] }>;\n\n  /**\n   * Cancel active downloads\n   * @param options Object containing array of download IDs to cancel\n   * @returns Promise with array of cancelled download IDs\n   */\n  cancelDownloads(options: { value: string[] }): Promise<{ value: string[] }>;\n\n  /**\n   * Resume all paused downloads\n   * @returns Promise with result of resume operation\n   */\n  resumeDownloads(): Promise<{ value: string }>;\n\n  /**\n   * Get list of all downloads\n   * @returns Promise with list of downloads\n   */\n  getDownloadList(): Promise<{ value: string }>;\n\n  /**\n   * Get download list filtered by ID\n   * @returns Promise with filtered list of downloads\n   */\n  getDownloadListById(): Promise<{ value: string }>;\n}\n\nexport { TaleemabadPlugin };\n"]}